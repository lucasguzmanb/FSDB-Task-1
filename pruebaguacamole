desc NOMBRE de la file para ver las columnas


//Para loans debería tener(loan_id, start_date, return_date, user_id, copy_id, returned, real_return_date)

SELECT signature, date_time, return, user_id FROM  fsdb.loans
SELECT id FROM copies;

//Para Sanctions debería tener(id, user_id, loan_id, sanction_days, start_date, end_date)
//el id de sanctions lo tengo que crear.
SELECT id FROM loans W
    //Con esto selecciono las que tienen sanction
SELECT date_time, return, user_id 
FROM fsdb.loans 
WHERE RETURN IS NOT NULL 
AND TO_DATE(RETURN, 'DD/MM/YYYY HH24:MI:SS') - TO_DATE(DATE_TIME, 'DD/MM/YYYY HH24:MI:SS') > 14; 


//Para users debería tener(user_id, name, surname1, surname2, passport, birthdate, town, municipality_id, address, email, telephone, user_type)

 SELECT user_id, name, surname1, surname2, passport, birthdate, town, address, email, phone FROM fsdb.loans

//para user_type tengo q poner 1 si es biblioteca y 0 si no//

INSERT INTO users (id, name, surname1, surname2, passport, birthdate, town, municipality_id, address, email, telephone, is_library)
SELECT l.user_id, l.name, l.surname1, l.surname2, l.passport, 
       TO_DATE(l.birthdate, 'DD-MM-YYYY'), 
       l.town, 
       (SELECT m.id FROM municipalities m WHERE m.name = l.town), -- Buscamos el municipality_id
       l.address, l.email, l.phone,
       CASE 
           WHEN UPPER(l.name) LIKE 'BIBLIOTECA%' THEN 1 
           ELSE 0 
       END AS is_library
FROM fsdb.loans l;



//Para reservations debería tener(id, copy_id, user_id, route_id)



//Para publications debería tener( ISBN, book_id, main_language, other_languages, edition, publisher, lenght, series, legal_deposit, publication_place, dimensions, physical_chars, additional_material, additional_notes, national_id, URL)
SELECT ISBN, main_language, other_languages, edition, publisher, extension, series, pub_place, dimensions, physical_features, attached_materials, notes, national_lib_id, URL FROM  fsdb.acervus
SELECT id FROM books

